
nixie_program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000396  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000867  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bd  00000000  00000000  00000cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039b  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012e  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e9       	ldi	r30, 0x96	; 150
  90:	f3 e0       	ldi	r31, 0x03	; 3
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 30       	cpi	r26, 0x00	; 0
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  a2:	0c 94 c9 01 	jmp	0x392	; 0x392 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <T1delay>:
const int PRZERWA = 00;


void T1delay()
{
	while( (TIFR1 & 1) == 0);
  aa:	b0 9b       	sbis	0x16, 0	; 22
  ac:	fe cf       	rjmp	.-4      	; 0xaa <T1delay>
	TIFR1= 1;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	86 bb       	out	0x16, r24	; 22
	TCNT1= 49912;
  b2:	88 ef       	ldi	r24, 0xF8	; 248
  b4:	92 ec       	ldi	r25, 0xC2	; 194
  b6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  ba:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
  be:	08 95       	ret

000000c0 <wybor>:
	
	return;
}

void wybor(unsigned char ust[3])
{
  c0:	cf 92       	push	r12
  c2:	df 92       	push	r13
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	fc 01       	movw	r30, r24
	unsigned char wybrany= 0;
  d2:	40 e0       	ldi	r20, 0x00	; 0
					_delay_ms(PRZERWA);
					break;
				}
				case 1 :
				{
					PORTB= 0xff;
  d4:	ee 24       	eor	r14, r14
  d6:	ea 94       	dec	r14
				return;
			}

			if( (PINA & 3) == 1)
			{
				wybrany= (wybrany + 1)  % 3;
  d8:	23 e0       	ldi	r18, 0x03	; 3
  da:	30 e0       	ldi	r19, 0x00	; 0
				if(!wybrany)
				{
					ust[wybrany]= (ust[wybrany] + 1) % 24;
				} else
				{
					ust[wybrany]= (ust[wybrany] + 1) % 60;
  dc:	0c e3       	ldi	r16, 0x3C	; 60
  de:	10 e0       	ldi	r17, 0x00	; 0

			if( (PINA & 3) == 2)
			{
				if(!wybrany)
				{
					ust[wybrany]= (ust[wybrany] + 1) % 24;
  e0:	0f 2e       	mov	r0, r31
  e2:	f8 e1       	ldi	r31, 0x18	; 24
  e4:	cf 2e       	mov	r12, r31
  e6:	d1 2c       	mov	r13, r1
  e8:	f0 2d       	mov	r31, r0
				{
					ust[wybrany]= (ust[wybrany] + 1) % 60;
				}
			}
			
			PORTD= ust[2]/10 + (ust[2]%10)*16;
  ea:	0f 2e       	mov	r0, r31
  ec:	fd ec       	ldi	r31, 0xCD	; 205
  ee:	ff 2e       	mov	r15, r31
  f0:	f0 2d       	mov	r31, r0
{
	unsigned char wybrany= 0;
	_delay_ms(PRZERWA);
	while(1)
		{
			switch(wybrany)
  f2:	41 30       	cpi	r20, 0x01	; 1
  f4:	31 f0       	breq	.+12     	; 0x102 <wybor+0x42>
  f6:	18 f0       	brcs	.+6      	; 0xfe <wybor+0x3e>
  f8:	42 30       	cpi	r20, 0x02	; 2
  fa:	29 f0       	breq	.+10     	; 0x106 <wybor+0x46>
  fc:	05 c0       	rjmp	.+10     	; 0x108 <wybor+0x48>
			{
				case 0 :
				{
					PORTD= 0xff;
  fe:	eb b8       	out	0x0b, r14	; 11
 100:	03 c0       	rjmp	.+6      	; 0x108 <wybor+0x48>
					_delay_ms(PRZERWA);
					break;
				}
				case 1 :
				{
					PORTB= 0xff;
 102:	e5 b8       	out	0x05, r14	; 5
 104:	01 c0       	rjmp	.+2      	; 0x108 <wybor+0x48>
					_delay_ms(PRZERWA);
					break;
				}
				case 2 :
				{
					PORTC= 0xff;
 106:	e8 b8       	out	0x08, r14	; 8
					_delay_ms(PRZERWA);
					break;
				}
			}

			if( (PINA & 3) == 0)
 108:	80 b1       	in	r24, 0x00	; 0
 10a:	83 70       	andi	r24, 0x03	; 3
 10c:	09 f4       	brne	.+2      	; 0x110 <wybor+0x50>
 10e:	62 c0       	rjmp	.+196    	; 0x1d4 <wybor+0x114>
			{
				_delay_ms(PRZERWA);
				return;
			}

			if( (PINA & 3) == 1)
 110:	80 b1       	in	r24, 0x00	; 0
 112:	83 70       	andi	r24, 0x03	; 3
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	39 f4       	brne	.+14     	; 0x126 <wybor+0x66>
			{
				wybrany= (wybrany + 1)  % 3;
 118:	84 2f       	mov	r24, r20
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	01 96       	adiw	r24, 0x01	; 1
 11e:	b9 01       	movw	r22, r18
 120:	0e 94 a1 01 	call	0x342	; 0x342 <__divmodhi4>
 124:	48 2f       	mov	r20, r24
			}

			if( (PINA & 3) == 2)
 126:	80 b1       	in	r24, 0x00	; 0
 128:	83 70       	andi	r24, 0x03	; 3
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	a1 f4       	brne	.+40     	; 0x156 <wybor+0x96>
			{
				if(!wybrany)
 12e:	41 11       	cpse	r20, r1
 130:	08 c0       	rjmp	.+16     	; 0x142 <wybor+0x82>
				{
					ust[wybrany]= (ust[wybrany] + 1) % 24;
 132:	80 81       	ld	r24, Z
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	b6 01       	movw	r22, r12
 13a:	0e 94 a1 01 	call	0x342	; 0x342 <__divmodhi4>
 13e:	80 83       	st	Z, r24
 140:	0a c0       	rjmp	.+20     	; 0x156 <wybor+0x96>
				} else
				{
					ust[wybrany]= (ust[wybrany] + 1) % 60;
 142:	ef 01       	movw	r28, r30
 144:	c4 0f       	add	r28, r20
 146:	d1 1d       	adc	r29, r1
 148:	88 81       	ld	r24, Y
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	b8 01       	movw	r22, r16
 150:	0e 94 a1 01 	call	0x342	; 0x342 <__divmodhi4>
 154:	88 83       	st	Y, r24
				}
			}
			
			PORTD= ust[2]/10 + (ust[2]%10)*16;
 156:	82 81       	ldd	r24, Z+2	; 0x02
 158:	8f 9d       	mul	r24, r15
 15a:	91 2d       	mov	r25, r1
 15c:	11 24       	eor	r1, r1
 15e:	96 95       	lsr	r25
 160:	96 95       	lsr	r25
 162:	96 95       	lsr	r25
 164:	69 2f       	mov	r22, r25
 166:	66 0f       	add	r22, r22
 168:	56 2f       	mov	r21, r22
 16a:	55 0f       	add	r21, r21
 16c:	55 0f       	add	r21, r21
 16e:	56 0f       	add	r21, r22
 170:	85 1b       	sub	r24, r21
 172:	50 e1       	ldi	r21, 0x10	; 16
 174:	85 9f       	mul	r24, r21
 176:	90 0d       	add	r25, r0
 178:	11 24       	eor	r1, r1
 17a:	9b b9       	out	0x0b, r25	; 11
			PORTB= ust[1]/10 + (ust[1]%10)*16;
 17c:	81 81       	ldd	r24, Z+1	; 0x01
 17e:	8f 9d       	mul	r24, r15
 180:	91 2d       	mov	r25, r1
 182:	11 24       	eor	r1, r1
 184:	96 95       	lsr	r25
 186:	96 95       	lsr	r25
 188:	96 95       	lsr	r25
 18a:	69 2f       	mov	r22, r25
 18c:	66 0f       	add	r22, r22
 18e:	56 2f       	mov	r21, r22
 190:	55 0f       	add	r21, r21
 192:	55 0f       	add	r21, r21
 194:	56 0f       	add	r21, r22
 196:	85 1b       	sub	r24, r21
 198:	50 e1       	ldi	r21, 0x10	; 16
 19a:	85 9f       	mul	r24, r21
 19c:	90 0d       	add	r25, r0
 19e:	11 24       	eor	r1, r1
 1a0:	95 b9       	out	0x05, r25	; 5
			PORTC= ust[0]/10 + (ust[0]%10)*16;
 1a2:	80 81       	ld	r24, Z
 1a4:	8f 9d       	mul	r24, r15
 1a6:	91 2d       	mov	r25, r1
 1a8:	11 24       	eor	r1, r1
 1aa:	96 95       	lsr	r25
 1ac:	96 95       	lsr	r25
 1ae:	96 95       	lsr	r25
 1b0:	69 2f       	mov	r22, r25
 1b2:	66 0f       	add	r22, r22
 1b4:	56 2f       	mov	r21, r22
 1b6:	55 0f       	add	r21, r21
 1b8:	55 0f       	add	r21, r21
 1ba:	56 0f       	add	r21, r22
 1bc:	85 1b       	sub	r24, r21
 1be:	50 e1       	ldi	r21, 0x10	; 16
 1c0:	85 9f       	mul	r24, r21
 1c2:	90 0d       	add	r25, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	98 b9       	out	0x08, r25	; 8
			PORTA= ( (PORTC & 0b00111100) << 2 ) + 0b1111;
 1c8:	98 b1       	in	r25, 0x08	; 8
 1ca:	99 0f       	add	r25, r25
 1cc:	99 0f       	add	r25, r25
 1ce:	9f 60       	ori	r25, 0x0F	; 15
 1d0:	92 b9       	out	0x02, r25	; 2
		}
 1d2:	8f cf       	rjmp	.-226    	; 0xf2 <wybor+0x32>
	return;
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	08 95       	ret

000001e6 <main>:


int main(void)
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <main+0x6>
 1ec:	1f 92       	push	r1
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
	// 1-out 0-in
	DDRA= 0b00000000;   //in
 1f2:	11 b8       	out	0x01, r1	; 1
	DDRC= 0b11111111;   //out hour
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	87 b9       	out	0x07, r24	; 7
	DDRB= 0b11111111;   //out min
 1f8:	84 b9       	out	0x04, r24	; 4
	DDRD= 0b11111111;   //out sec
 1fa:	8a b9       	out	0x0a, r24	; 10

	PORTA= 0b11111111;  //pull-up
 1fc:	82 b9       	out	0x02, r24	; 2
	
	TCCR1B= 0b00000101; //prescaler= 1024
 1fe:	85 e0       	ldi	r24, 0x05	; 5
 200:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	unsigned char ust[3] = {12, 34, 56};
 204:	8c e0       	ldi	r24, 0x0C	; 12
 206:	89 83       	std	Y+1, r24	; 0x01
 208:	82 e2       	ldi	r24, 0x22	; 34
 20a:	8a 83       	std	Y+2, r24	; 0x02
 20c:	88 e3       	ldi	r24, 0x38	; 56
 20e:	8b 83       	std	Y+3, r24	; 0x03
	
	PORTD= ust[2]/10 + (ust[2]%10)*16;
 210:	85 e6       	ldi	r24, 0x65	; 101
 212:	8b b9       	out	0x0b, r24	; 11
	PORTB= ust[1]/10 + (ust[1]%10)*16;
 214:	2a 81       	ldd	r18, Y+2	; 0x02
 216:	8d ec       	ldi	r24, 0xCD	; 205
 218:	28 9f       	mul	r18, r24
 21a:	91 2d       	mov	r25, r1
 21c:	11 24       	eor	r1, r1
 21e:	96 95       	lsr	r25
 220:	96 95       	lsr	r25
 222:	96 95       	lsr	r25
 224:	49 2f       	mov	r20, r25
 226:	44 0f       	add	r20, r20
 228:	34 2f       	mov	r19, r20
 22a:	33 0f       	add	r19, r19
 22c:	33 0f       	add	r19, r19
 22e:	34 0f       	add	r19, r20
 230:	23 1b       	sub	r18, r19
 232:	30 e1       	ldi	r19, 0x10	; 16
 234:	23 9f       	mul	r18, r19
 236:	90 0d       	add	r25, r0
 238:	11 24       	eor	r1, r1
 23a:	95 b9       	out	0x05, r25	; 5
	PORTC= ust[0]/10 + (ust[0]%10)*16;
 23c:	99 81       	ldd	r25, Y+1	; 0x01
 23e:	98 9f       	mul	r25, r24
 240:	81 2d       	mov	r24, r1
 242:	11 24       	eor	r1, r1
 244:	86 95       	lsr	r24
 246:	86 95       	lsr	r24
 248:	86 95       	lsr	r24
 24a:	38 2f       	mov	r19, r24
 24c:	33 0f       	add	r19, r19
 24e:	23 2f       	mov	r18, r19
 250:	22 0f       	add	r18, r18
 252:	22 0f       	add	r18, r18
 254:	23 0f       	add	r18, r19
 256:	92 1b       	sub	r25, r18
 258:	20 e1       	ldi	r18, 0x10	; 16
 25a:	92 9f       	mul	r25, r18
 25c:	80 0d       	add	r24, r0
 25e:	11 24       	eor	r1, r1
 260:	88 b9       	out	0x08, r24	; 8
	PORTA= ( (PORTC & 0b00111100) << 2 ) + 0b1111;
 262:	88 b1       	in	r24, 0x08	; 8
 264:	88 0f       	add	r24, r24
 266:	88 0f       	add	r24, r24
 268:	8f 60       	ori	r24, 0x0F	; 15
 26a:	82 b9       	out	0x02, r24	; 2
		{
			_delay_ms(PRZERWA);
			wybor(ust);
		}
		
		ust[2]= (ust[2]+1)%60;
 26c:	0c e3       	ldi	r16, 0x3C	; 60
 26e:	10 e0       	ldi	r17, 0x00	; 0
		PORTD= ust[2]/10 + (ust[2]%10)*16;
 270:	0f 2e       	mov	r0, r31
 272:	fd ec       	ldi	r31, 0xCD	; 205
 274:	df 2e       	mov	r13, r31
 276:	f0 2d       	mov	r31, r0
			PORTB= ust[1]/10 + (ust[1]%10)*16;
		}
		
		if(ust[1] == 0)
		{
			ust[0]= (ust[0]+1) % 24;
 278:	0f 2e       	mov	r0, r31
 27a:	f8 e1       	ldi	r31, 0x18	; 24
 27c:	ef 2e       	mov	r14, r31
 27e:	f1 2c       	mov	r15, r1
 280:	f0 2d       	mov	r31, r0
	PORTC= ust[0]/10 + (ust[0]%10)*16;
	PORTA= ( (PORTC & 0b00111100) << 2 ) + 0b1111;
	
	while(1)
	{
		if( (PINA & 3) == 0)
 282:	80 b1       	in	r24, 0x00	; 0
 284:	83 70       	andi	r24, 0x03	; 3
 286:	21 f4       	brne	.+8      	; 0x290 <main+0xaa>
		{
			_delay_ms(PRZERWA);
			wybor(ust);
 288:	ce 01       	movw	r24, r28
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	0e 94 60 00 	call	0xc0	; 0xc0 <wybor>
		}
		
		ust[2]= (ust[2]+1)%60;
 290:	8b 81       	ldd	r24, Y+3	; 0x03
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	b8 01       	movw	r22, r16
 298:	0e 94 a1 01 	call	0x342	; 0x342 <__divmodhi4>
 29c:	8b 83       	std	Y+3, r24	; 0x03
		PORTD= ust[2]/10 + (ust[2]%10)*16;
 29e:	8d 9d       	mul	r24, r13
 2a0:	91 2d       	mov	r25, r1
 2a2:	11 24       	eor	r1, r1
 2a4:	96 95       	lsr	r25
 2a6:	96 95       	lsr	r25
 2a8:	96 95       	lsr	r25
 2aa:	39 2f       	mov	r19, r25
 2ac:	33 0f       	add	r19, r19
 2ae:	23 2f       	mov	r18, r19
 2b0:	22 0f       	add	r18, r18
 2b2:	22 0f       	add	r18, r18
 2b4:	23 0f       	add	r18, r19
 2b6:	82 1b       	sub	r24, r18
 2b8:	30 e1       	ldi	r19, 0x10	; 16
 2ba:	83 9f       	mul	r24, r19
 2bc:	90 0d       	add	r25, r0
 2be:	11 24       	eor	r1, r1
 2c0:	9b b9       	out	0x0b, r25	; 11
		
		if(ust[2] == 0)
 2c2:	8b 81       	ldd	r24, Y+3	; 0x03
 2c4:	81 11       	cpse	r24, r1
 2c6:	19 c0       	rjmp	.+50     	; 0x2fa <main+0x114>
		{
			ust[1]= (ust[1]+1) % 60;
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	b8 01       	movw	r22, r16
 2d0:	0e 94 a1 01 	call	0x342	; 0x342 <__divmodhi4>
 2d4:	8a 83       	std	Y+2, r24	; 0x02
			PORTB= ust[1]/10 + (ust[1]%10)*16;
 2d6:	8d 9d       	mul	r24, r13
 2d8:	91 2d       	mov	r25, r1
 2da:	11 24       	eor	r1, r1
 2dc:	96 95       	lsr	r25
 2de:	96 95       	lsr	r25
 2e0:	96 95       	lsr	r25
 2e2:	39 2f       	mov	r19, r25
 2e4:	33 0f       	add	r19, r19
 2e6:	23 2f       	mov	r18, r19
 2e8:	22 0f       	add	r18, r18
 2ea:	22 0f       	add	r18, r18
 2ec:	23 0f       	add	r18, r19
 2ee:	82 1b       	sub	r24, r18
 2f0:	20 e1       	ldi	r18, 0x10	; 16
 2f2:	82 9f       	mul	r24, r18
 2f4:	90 0d       	add	r25, r0
 2f6:	11 24       	eor	r1, r1
 2f8:	95 b9       	out	0x05, r25	; 5
		}
		
		if(ust[1] == 0)
 2fa:	8a 81       	ldd	r24, Y+2	; 0x02
 2fc:	81 11       	cpse	r24, r1
 2fe:	1e c0       	rjmp	.+60     	; 0x33c <main+0x156>
		{
			ust[0]= (ust[0]+1) % 24;
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	b7 01       	movw	r22, r14
 308:	0e 94 a1 01 	call	0x342	; 0x342 <__divmodhi4>
 30c:	89 83       	std	Y+1, r24	; 0x01
			PORTC= ust[0]/10 + (ust[0]%10)*16;
 30e:	8d 9d       	mul	r24, r13
 310:	91 2d       	mov	r25, r1
 312:	11 24       	eor	r1, r1
 314:	96 95       	lsr	r25
 316:	96 95       	lsr	r25
 318:	96 95       	lsr	r25
 31a:	39 2f       	mov	r19, r25
 31c:	33 0f       	add	r19, r19
 31e:	23 2f       	mov	r18, r19
 320:	22 0f       	add	r18, r18
 322:	22 0f       	add	r18, r18
 324:	23 0f       	add	r18, r19
 326:	82 1b       	sub	r24, r18
 328:	30 e1       	ldi	r19, 0x10	; 16
 32a:	83 9f       	mul	r24, r19
 32c:	90 0d       	add	r25, r0
 32e:	11 24       	eor	r1, r1
 330:	98 b9       	out	0x08, r25	; 8
			PORTA= ( (PORTC & 0b00111100) << 2 ) + 0b1111;
 332:	88 b1       	in	r24, 0x08	; 8
 334:	88 0f       	add	r24, r24
 336:	88 0f       	add	r24, r24
 338:	8f 60       	ori	r24, 0x0F	; 15
 33a:	82 b9       	out	0x02, r24	; 2
		}
		
		T1delay();
 33c:	0e 94 55 00 	call	0xaa	; 0xaa <T1delay>
	}
 340:	a0 cf       	rjmp	.-192    	; 0x282 <main+0x9c>

00000342 <__divmodhi4>:
 342:	97 fb       	bst	r25, 7
 344:	07 2e       	mov	r0, r23
 346:	16 f4       	brtc	.+4      	; 0x34c <__divmodhi4+0xa>
 348:	00 94       	com	r0
 34a:	07 d0       	rcall	.+14     	; 0x35a <__divmodhi4_neg1>
 34c:	77 fd       	sbrc	r23, 7
 34e:	09 d0       	rcall	.+18     	; 0x362 <__divmodhi4_neg2>
 350:	0e 94 b5 01 	call	0x36a	; 0x36a <__udivmodhi4>
 354:	07 fc       	sbrc	r0, 7
 356:	05 d0       	rcall	.+10     	; 0x362 <__divmodhi4_neg2>
 358:	3e f4       	brtc	.+14     	; 0x368 <__divmodhi4_exit>

0000035a <__divmodhi4_neg1>:
 35a:	90 95       	com	r25
 35c:	81 95       	neg	r24
 35e:	9f 4f       	sbci	r25, 0xFF	; 255
 360:	08 95       	ret

00000362 <__divmodhi4_neg2>:
 362:	70 95       	com	r23
 364:	61 95       	neg	r22
 366:	7f 4f       	sbci	r23, 0xFF	; 255

00000368 <__divmodhi4_exit>:
 368:	08 95       	ret

0000036a <__udivmodhi4>:
 36a:	aa 1b       	sub	r26, r26
 36c:	bb 1b       	sub	r27, r27
 36e:	51 e1       	ldi	r21, 0x11	; 17
 370:	07 c0       	rjmp	.+14     	; 0x380 <__udivmodhi4_ep>

00000372 <__udivmodhi4_loop>:
 372:	aa 1f       	adc	r26, r26
 374:	bb 1f       	adc	r27, r27
 376:	a6 17       	cp	r26, r22
 378:	b7 07       	cpc	r27, r23
 37a:	10 f0       	brcs	.+4      	; 0x380 <__udivmodhi4_ep>
 37c:	a6 1b       	sub	r26, r22
 37e:	b7 0b       	sbc	r27, r23

00000380 <__udivmodhi4_ep>:
 380:	88 1f       	adc	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	5a 95       	dec	r21
 386:	a9 f7       	brne	.-22     	; 0x372 <__udivmodhi4_loop>
 388:	80 95       	com	r24
 38a:	90 95       	com	r25
 38c:	bc 01       	movw	r22, r24
 38e:	cd 01       	movw	r24, r26
 390:	08 95       	ret

00000392 <_exit>:
 392:	f8 94       	cli

00000394 <__stop_program>:
 394:	ff cf       	rjmp	.-2      	; 0x394 <__stop_program>
